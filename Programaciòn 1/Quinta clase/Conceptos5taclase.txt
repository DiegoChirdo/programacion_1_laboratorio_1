Cadenas de Caracteres
(string)

void	|	char letra;
int	|	
char	|		'd'
float	|
double	|	char nombre[41];   
	|		
	|		'\0'= finalizador de carácteres. finaliza el string
	|
	|		__________________
	|	INCLUDE #string.h
	|	char nombre[31];	
	|	int nro = 5;
	|	int nros[5] = {1,5,3,4,2};
	|	char saludo[10];
	|	---saludo = "hola";----- >>>> NO SE PUEDE HACER
	|	strcpy(saludo,"hola"); (lo que està a la derecha del igual, lo asigna lo que està a la derecha de la coma)
	|		var  asignación
	|
	|	printf("%s",saludo);  /* %s porque es una cadena de caracteres (string) */
	|	puts("HOLA"); /* solo texto */
	|	puts(saludo); /* es la variable */
	|	printf("El saludo diciendo %s", saludo);
	|	printf("El dijo Hola");
	|
	|	puts = printf 
	|	
	|	fflush(stdin);
	|	scanf("%s",nombre); = Cuando es un vector no lleva "&". Porque es el primer elemento de la dimensión de memoria.
	|   /*	nombre   =  $nombre[0]; (Ambos códigos conllevan el mismo resultado)  */
	|
	

    char texto[31];			(Define la variable texto, con 31 caracteres (incluyendo el \0)
    printf("\nIngrese nombre: ");	/* Escribe en la consola lo que está entre comillas */
    scanf("%s", texto);			Nos permite ingresar algo, y se lo asigna a la variable texto
    printf("\nNombre: %s ",texto);	Nos devuelve lo ingresado mediante un printf
    return 0;
	_____________________________


    char buffer[64];
    int cantidad;

    printf("Nombre: ");
    //fgets(buffer, 62, stdin);
    fgets(buffer,sizeof(buffer)-2,stdin);  /* se le resta -2 porque toma el finalizador y un digito mas, sino desborda el prgama */

    cantidad = strlen(buffer);

    buffer[cantidad-1] = '\0';

    printf("%s", buffer);

    return 0;


fgets = variable - Cuando nosotros escribimos JUAN con fgets. toma los 4 caracteres varios de juan, nos coloca un caracter especial de fgets al final. y despues, agrega el \0. (función para trabajar con archivos)
sizeof = asegura que no me voy a exceder de cantidad de datos en la memoria
stdin = standard de teclado/de ingreso (desde donde se trabaja todo)

 sizeof = operador binario. nos va a decir la cantidad de bites que ocupa el tipo de dato/variable en la memoria */
strupr(nombre); = pasa todos los caracteres a mayùsucla
strlwr(nombre); = pasa todos los caracteres a minuscula
tolower, y toupper son para un solo caracter. str de string.